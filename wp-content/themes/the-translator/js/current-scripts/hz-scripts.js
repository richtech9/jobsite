jQuery(function($){		/******* reply to comment ********************/	//code-bookmark-js comment disscussion hitting the reply button	jQuery('.reply_to_comment').click(function(){		var comment_id =  jQuery(this).data('comment_id');		jQuery('#reply_comment_'+comment_id+'').toggle();	});	//code-notes updated other js handler for same ajax as below	//code-bookmark-js  when the user adds to the discussion on many pages	jQuery('.submit_reply').click(function(){		var comment_id =  jQuery(this).data('comment_id');		var comment =  jQuery(this).closest('#reply_comment_'+comment_id).find("input[name='comment']").val();		if($.trim(comment) === ''){			jQuery(this).closest('#reply_comment_'+comment_id).find('.commentEmptyMessage').html('Please enter your comment.');			return false;		}else{			jQuery(this).closest('#reply_comment_'+comment_id).find('.commentEmptyMessage').html(' ');		}		var data = { 'action': 'hz_post_fl_discussion','data': jQuery('#contest_discussion_reply_'+comment_id+'').serialize() };        jQuery(this).closest('#reply_comment_'+comment_id).find("input[name='comment']").val('');        //code-notes empty the form input after serialize		jQuery.post( adminAjax.url, data, function(response_raw){            /**             * @type {FreelinguistDiscussionResponse} response             */            var response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                $(".comments-list").prepend( response.context );                window.location.reload();            } else {                if(!response.is_login){                    var redirect = window.location.href;                    window.location.href = devscript_getsiteurl.getsiteurl+"/login/?redirect_to="+redirect;                } else {                    will_handle_ajax_error('Project Discussion',response.message);                }            }		},'json');			return false;	});			/************************/    //code-bookmark-js when creating a milestone for both freelancer and customer, this is the date for it it	if(jQuery("#ms_delivery_date").length>0){		jQuery("#ms_delivery_date").datepicker({			dateFormat: "yy-mm-dd",			minDate: 0,			changeMonth: true,			changeYear: true,			setDate:new Date()		});	}	//code-notes the js handler for creating the milestones	//code-bookmark-js when either freelancer or customer is creating the milestone	jQuery("form#hz_create_milestone").on( 'submit', function(){		//code bookmark calls the ajax endpoint on hz_create_milestone_cb		//code bookmark calls the ajax endpoint of hz_create_milestone_cb		//ajax-entry-protected hz_create_milestone_cb		let that_context = this;		function callback() {            $('.alert').hide();            var form_data = $(this).serializeArray(); // convert form to array            form_data = freelinguist_add_security_keys(form_data, 'hz_create_milestone', true);            if (form_data === false) {                return false;            }            var param_data = $.param(form_data);            var data = {'action': 'hz_create_milestone', 'data': param_data};            $.post(adminAjax, data, function (response_raw) {                /**                 * @type {FreelinguistBasicAjaxResponse} response                 */                let response = freelinguist_safe_cast_to_object(response_raw);                if (response.form_key) {                    adminAjax.form_keys.hz_create_milestone = response.form_key;                }                if (response.status === true) {                    var row = '<tr>';                    row += '<td>' + $("#ms_details").val() + '</td>';                    row += '<td>$' + $("#ms_amount").val() + '</td>';                    row += '<td>' + $("#ms_delivery_date").val() + '</td>';                    row += '<td class="released-stat">Pending</td>';                    row += '<tr>';                    $(".ms_data_tbl").append(row);                    window.location.reload(true);                } else {                    will_handle_ajax_error('Customer Feedback for Content',response.message);                    $('.alert').html(response.message);                    $('.alert').show();                }            });            return false;        }		let call_me_ishmael = callback.bind(that_context);		if (xt_user_role ==='customer') {            let amount =  jQuery("input#ms_amount").val();            freelinguist_show_fee_box('customer_creating_milestone',amount,null,null,call_me_ishmael);            return false;		} else {			return call_me_ishmael();		}	});	//code-notes customer gives feedback about content    //code-bookmark-js when the customer is giving feedback about a content	jQuery("form#hz_content_customer_feedback").on( 'submit', function(){        var form_data = $(this).serializeArray(); // convert form to array        form_data = freelinguist_add_security_keys(form_data,'hz_content_customer_feedback',true);        if (form_data === false) {return false;}        var param_data = $.param(form_data);		var data = { 'action': 'hz_content_customer_feedback', 'data':param_data };		//ajax-entry-protected hz_content_customer_feedback		$.post( adminAjax, data, function( response_raw ){            /**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                will_handle_ajax_error('Customer Feedback for Content',response.message);            }		});		return false;	});    //code-bookmark-js this calls the ajax for the freelancer giving feedback about the customer purchasing content	//code-notes updated ajax to use standard response	jQuery("form#hz_content_translator_feedback").on( 'submit', function(){		var data = { 'action': 'hz_content_translator_feedback', 'data': $(this).serialize() };		$.post( adminAjax, data, function( response_raw ){            /**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                will_handle_ajax_error('Freelaner Feedback for Content',response.message);            }		});		return false;	});    //code-bookmark-js calls the ajax for the feedback from the customer to the freelancer in the contest winning proposal	jQuery("form#hz_proposal_customer_feedback").on( 'submit', function(){		var data = { 'action': 'hz_proposal_customer_feedback', 'data': $(this).serialize() };		$.post( adminAjax, data, function( response_raw ){            /**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                will_handle_ajax_error('Customer Feedback for Proposal',response.message);            }		});		return false;	});    //code-bookmark-js this is where the js calls the ajax for the customer providing review for the freelancer at the end of the project	//code-notes updated the js handler for customer project feedback	jQuery("form#hz_project_customer_feedback").on( 'submit', function(){		var data = { 'action': 'hz_project_customer_feedback', 'data': $(this).serialize() };		$.post( adminAjax, data, function( response_raw ){            /**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                $('div#feedbackModel').modal('hide');                will_handle_ajax_error('Customer Project Feedback',response.message);            }		});		return false;	});    //code-bookmark-js This is where the freelancer leaves a review for a customer after project is done	//code-notes updated the js handler for the freelancer giving project feedback	jQuery("form#hz_project_translator_feedback").on( 'submit', function(){		var data = { 'action': 'hz_project_translator_feedback', 'data': $(this).serialize() };		$.post( adminAjax, data, function( response_raw ){			/**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                $('div#feedbackTranslatorModel').modal('hide');                will_handle_ajax_error('Customer Project Feedback',response.message);            }		});		return false;	});    //code-bookmark-js calls the ajax for the feedback from the freelancer to the customer in the translator contest winning proposal	//code-notes js for freelancer proposal feedback now works with standardized errors	jQuery("form#hz_proposal_freelancer_feedback").on( 'submit', function(){		var data = { 'action': 'hz_proposal_freelancer_feedback', 'data': $(this).serialize() };		$.post( adminAjax, data, function( response_raw ){            /**             * @type {FreelinguistBasicAjaxResponse} response             */            let response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                window.location.reload(true);            } else {                will_handle_ajax_error('Freelancer Feedback for Proposal',response.message);            }		});		return false;	});	//code-bookmark-js when the customer adds more files to a winning proposal	$(document).on('click', '#hz_contest_data' ,function(){				'use strict';		var project_id 	= jQuery(this).data('id');		let proposal_id = jQuery(this).data('proposal_id');		var percent 	= jQuery('.percent');		var data = jQuery('#htrans-process').serializeArray();		data.push({'name': 'action', 'value': 'hz_contest_data_proc'});		data.push({'name': 'project_id', 'value': project_id});		data.push({'name': 'proposal_id', 'value': proposal_id});		//code-notes customer uploads file that are private here,on the winner page, and public on the edit page. Need to pass in proposal id to make it only seen on the proposal page for it				jQuery(this).fileupload({			url: adminAjax.url,			formData : data, 			dataType: 'json',			global: false,	        			add: function(e, data){				var file_Size_limit = 1024 * 1024 *50;				if (data.files[0].size > file_Size_limit){					bootbox.alert(data.files[0].name + " File size is greater than 50MB");				}else{					data.submit();				}			}, 			send: function(e, data){			},            fail: function (e, data) {                let maybe_information = data.response().jqXHR.responseJSON;                if (typeof maybe_information === 'object' && maybe_information !== null) {                    will_handle_ajax_error('Problem Uploading File',maybe_information.message);                }                $("#progress").css('display', 'none');            },			done: function (e, data) {				jQuery('#atc_files_order').attr('disabled',false);				if (data.result != null){					jQuery.each(data.result.files, function (index, file) {		                if(file.error !== undefined){		                	bootbox.alert(file.name + ' ' +file.error);	                			                }		                jQuery('#progress').css( 'display','none');		                jQuery('.percent').css( 'display','none');		                window.location.reload(true);		            });				}else{					jQuery("#progress").css('display','none');					jQuery('#atc_files_order').attr('disabled',false);					bootbox.alert( reg_validation.general_file_upload_error_message );				}			},			progressall: function (e, data) {				jQuery('#progress').css( 'display','block');				var progress = parseInt(data.loaded / data.total * 100, 10);				jQuery('#atc_files_order').attr('disabled',false);				jQuery('#progress .progress-bar').css(					'width',					progress + '%'					);				percent.html(progress + '%');			}		}).prop('disabled', !$.support.fileInput)		.parent().addClass($.support.fileInput ? undefined : 'disabled');	});    //code-bookmark-js when the freelancer is making a new proposal for a contest and adds a file	$(document).on('click', '#hz_contest_new_proposal_data' ,function(){		//code-notes where the new proposal calls for the uploaded file to be done				'use strict';		var project_id 	= jQuery(this).data('id');		var percent 	= jQuery('.percent');		var data = jQuery('#htrans-process').serializeArray();		data.push({'name': 'action', 'value': 'hz_contest_new_proposal_data_proc'});		data.push({'name': 'project_id', 'value': project_id});				jQuery(this).fileupload({			url: adminAjax.url,			formData : data, 			dataType: 'json',			global: false,	        			add: function(e, data){				var file_Size_limit = 1024 * 1024 *50;				if (data.files[0].size > file_Size_limit){					bootbox.alert(data.files[0].name + " File size is greater than 50MB");				}else{					jQuery('#files_name_container').html('');					jQuery('#progress').css( 'display','none');					data.submit();				}			},            fail: function (e, data) {                let maybe_information = data.response().jqXHR.responseJSON;                if (typeof maybe_information === 'object' && maybe_information !== null) {                    will_handle_ajax_error('Problem Uploading File',maybe_information.message);                }                $("#progress").css('display', 'none');            },			send: function(e, data){			},			done: function (e, data_thing) {				let data = freelinguist_safe_cast_to_object(data_thing);				jQuery('#atc_files_order').attr('disabled',false);								if(data){					if (data.result != null || data.result !== ''){						if (!data.result.hasOwnProperty('file_upload_data')) {                            bootbox.alert('Logic Flow Error');                            return;						}                        /**						 * @type {FreelinguistProposalUploadData} file_upload_data                         */						let file_upload_data = data.result.file_upload_data;						if (!file_upload_data.status) {                            bootbox.alert('Could not upload file: '+ file_upload_data.message);						}						let proposal_id,file_id;						for(let i = 0; i < file_upload_data.data.length; i++) {							let individual_data = file_upload_data.data[i];							if (individual_data.hasOwnProperty('proposal_id')) {								proposal_id = individual_data.proposal_id;							}                            if (individual_data.hasOwnProperty('file_id')) {                                file_id = individual_data.file_id;                            }						}						if (proposal_id && file_id) {                            jQuery('#submit_proposal_span').css( 'display','inline-block');                            jQuery('input#proposal_id').val(proposal_id);                            jQuery('input#file_id').val(file_id);                            jQuery('input#hz_contest_new_proposal_data').hide();						} else {                            jQuery('#submit_proposal_span').css( 'display','none');                            jQuery('input#proposal_id').val('');                            jQuery('input#file_id').val('');                            jQuery('input#hz_contest_new_proposal_data').show();						}                        jQuery('#progress').css( 'display','none');                        jQuery('.percent').css( 'display','none');						jQuery.each(data.result.files, function (index, file) {							$('<p>').text(file.name).appendTo('#files_name_container');							if(file.error !== undefined){								bootbox.alert('f' + file.name + ' ' +file.error);							}																				});					}else{												jQuery("#progress").css('display','none');						jQuery('#atc_files_order').attr('disabled',false);						bootbox.alert( reg_validation.general_file_upload_error_message );					}				}else{										jQuery("#progress").css('display','none');					jQuery('#atc_files_order').attr('disabled',false);					bootbox.alert( reg_validation.general_file_upload_error_message );				}			},			progressall: function (e, data) {				jQuery('#progress').css( 'display','block');				var progress = parseInt(data.loaded / data.total * 100, 10);				jQuery('#atc_files_order').attr('disabled',false);				jQuery('#progress .progress-bar').css(					'width',					progress + '%'					);				percent.html(progress + '%');				jQuery('#submit_proposal_span').css( 'display','inline-block');			},			error: function (e, data) {				//code-notes this should not happen anymore, if the file got filtered out, then it will be in the done still				jQuery("#progress").css('display','none');				jQuery("#submit_proposal_span").css('display','none');				jQuery('#atc_files_order').attr('disabled',false);				bootbox.alert( 'Something went wrong' );				console.debug(e,data);			}		}).prop('disabled', !$.support.fileInput)		.parent().addClass($.support.fileInput ? undefined : 'disabled');	});	//code-bookmark-js this is the js handler for the freelancer adding files to the winning proposal	jQuery(document).on('click', '#hz_contest_proposal_data' ,function(){		//code-notes updated response to deal with information sent back		'use strict';		var project_id 	= jQuery(this).data('id');						var proposal_id 		= jQuery(this).data('proposal_id');		var percent 	= jQuery('.percent');		var data = jQuery('#htrans-process').serializeArray();		data.push({'name': 'action', 'value': 'hz_contest_update_proposal_data_proc'});		data.push({'name': 'project_id', 'value': project_id});		data.push({'name': 'proposal_id', 'value': proposal_id});						jQuery(this).fileupload({			url: adminAjax.url,			formData : data, 			dataType: 'json',			global: false,	        			add: function(e, data){				var file_Size_limit = 1024 * 1024 *50;				if (data.files[0].size > file_Size_limit){					bootbox.alert(data.files[0].name + " File size is greater than 50MB");				}else{					jQuery('#files_name_container').html('');					jQuery('#progress').css( 'display','none');					data.submit();				}			}, 			send: function(e, data){			},            fail: function (e, data) {                let maybe_information = data.response().jqXHR.responseJSON;                if (typeof maybe_information === 'object' && maybe_information !== null) {                    will_handle_ajax_error('Problem Uploading File',maybe_information.message);                }                $("#progress").css('display', 'none');            },			done: function (e, data) {				jQuery('#atc_files_order').attr('disabled',false);								if (data.result != null){                    if (!data.result.hasOwnProperty('file_upload_data')) {                        jQuery("#progress").css('display','none');                        jQuery("#submit_proposal_span").css('display','none');                        jQuery('#atc_files_order').attr('disabled',false);                        bootbox.alert('Logic Flow Error');                        return;                    }                    /**                     * @type {FreelinguistProposalUploadData} file_upload_data                     */                    let file_upload_data = data.result.file_upload_data;                    if (!file_upload_data.status) {                        jQuery("#progress").css('display','none');                        jQuery("#submit_proposal_span").css('display','none');                        jQuery('#atc_files_order').attr('disabled',false);                        bootbox.alert('Could not upload file: ' + file_upload_data.message);                        return;                    }                    let proposal_id,file_id;                    for(let i = 0; i < file_upload_data.data.length; i++) {                        let individual_data = file_upload_data.data[i];                        if (individual_data.hasOwnProperty('proposal_id')) {                            proposal_id = individual_data.proposal_id;                        }                        if (individual_data.hasOwnProperty('file_id')) {                            file_id = individual_data.file_id;                        }                    }                    if (! file_id) {                        jQuery("#progress").css('display','none');                        jQuery("#submit_proposal_span").css('display','none');                        jQuery('#atc_files_order').attr('disabled',false);                        bootbox.alert('Could not attach file: '+ file_upload_data.filename);                        return;                    }					jQuery.each(data.result.files, function (index, file) {						$('<p>').text(file.name).appendTo('#files_name_container');						if(file.error !== undefined){							bootbox.alert(file.name + ' ' +file.error);	                							}						jQuery('#already_ins').val(file.name);						jQuery('#submit_proposal_span').css( 'display','inline-block');												jQuery('#progress').css( 'display','block');						jQuery('.percent').css( 'display','none');												//getLastInsertedProposalLink();						window.location.reload();					});				}else{					jQuery("#progress").css('display','none');					jQuery('#atc_files_order').attr('disabled',false);                    bootbox.alert( 'Something went wrong (b)' );				}			},			progressall: function (e, data) {				jQuery('#progress').css( 'display','block');				var progress = parseInt(data.loaded / data.total * 100, 10);				jQuery('#atc_files_order').attr('disabled',false);				jQuery('#progress .progress-bar').css(					'width',					progress + '%'					);				percent.html(progress + '%');				jQuery('#submit_proposal_span').css( 'display','inline-block');			},            error: function (e, data) {                //code-notes this should not happen anymore, if the file got filtered out, then it will be in the done still                jQuery("#progress").css('display','none');                jQuery("#submit_proposal_span").css('display','none');                jQuery('#atc_files_order').attr('disabled',false);                bootbox.alert( 'Something went wrong' );                console.debug(e,data);            }		}).prop('disabled', !$.support.fileInput)		.parent().addClass($.support.fileInput ? undefined : 'disabled');	});	//code-bookmark-js this is the handler for when the freelancer updates a proposal description    //code-notes minor changes to the error handling	jQuery(document).on('click', '#save_proposal' ,function(event){        //ajax-entry-protected hz_contest_new_proposal_data_proc_save		event.preventDefault();		jQuery('#submit_proposal').addClass('not-active');		var project_id 	= jQuery(this).data('project_id');		var data = [];				let proposal_id				= jQuery('#proposal_id').val();		let proposal_description	= jQuery('#proposal_description').val();		jQuery('span.fl-proposal-save-error').text('');		data.push({'name': 'action', 'value': 'hz_contest_new_proposal_data_proc_save'});		data.push({'name': 'project_id', 'value': project_id});		data.push({'name': 'proposal_id', 'value': proposal_id});		data.push({'name': 'proposal_description', 'value': proposal_description});        data = freelinguist_add_security_keys(data,'hz_contest_new_proposal_data_proc_save',true);        if (data === false) {return false;}		jQuery.post(adminAjax.url, data,			function(response_raw) {                /**				 * @type {FreelinguistProposalSaveResponse} response                 */            	let response = freelinguist_safe_cast_to_object(response_raw);            	if (response.status) {                    window.location.href=response.proposal_link;				} else {            		//code-notes show error                    will_handle_ajax_error('Information for Proposal',response.message);                    jQuery('span.fl-proposal-save-error').text(response.message);				}		});		});	//code-bookmark-js posts discussions between people in a project or contest	//code-notes updating the js handler for the post discussions now works with standardized errors	jQuery("#contest_discussion").on("submit", function(){		//ajax-entry-protected hz_post_fl_discussion		var comment =  jQuery("#contest_discussion").find('textarea[name="comment"]').val();		if($.trim(comment) === ''){            comment =  jQuery("#contest_discussion").find('input[name="comment"]').val();            if($.trim(comment) === ''){                jQuery("#contest_discussion").find('.commentEmptyMessageMain').html('Please enter your comment.');                return false;            }		}else{			jQuery("#contest_discussion").find('.commentEmptyMessageMain').html(' ');		}        var form_data = jQuery("#contest_discussion").serializeArray(); // convert form to array        form_data = freelinguist_add_security_keys(form_data,'hz_post_fl_discussion',true);        if (form_data === false) {return false;}        var param_data = $.param(form_data);        jQuery("#contest_discussion").find('input[name="comment"]').val('');//code-notes empty the form input		var data = { 'action': 'hz_post_fl_discussion','data': param_data };		jQuery.post( adminAjax.url, data, function(response_raw){            /**             * @type {FreelinguistDiscussionResponse} response             */            var response = freelinguist_safe_cast_to_object(response_raw);            if (response.status === true) {                $(".comments-list").prepend( response.context );                window.location.reload();            } else {                if(!response.is_login){                    var redirect = window.location.href;                    window.location.href = devscript_getsiteurl.getsiteurl+"/login/?redirect_to="+redirect;                } else {                    will_handle_ajax_error('Adding to the  Discussion',response.message);				}            }		},'json');			return false;	});			}); // doc READY Ends//code-bookmark-js when freelancers and customers change something in a milestonefunction hz_manage_milestone( mid, message_confirm, yes, no, fight ){    //ajax-entry-protected hz_manage_milestone    function callback() {        var revision_text = jQuery("#revision_text_" + mid + "").val();        var rejection_txt = jQuery("#rejection_txt_" + mid + "").val();        var data = {            action: 'hz_manage_milestone',            mid: mid,            fight: fight,            revision_text: revision_text,            rejection_txt: rejection_txt        };        data = freelinguist_add_security_keys(data, 'hz_manage_milestone');        if (data === false) {            return false;        }        jQuery.post(adminAjax.url, data, function (response_raw) {		/**		* @type {FreelinguistBasicAjaxResponse} response		*/			let response = freelinguist_safe_cast_to_object(response_raw);			if (response.status === true) {				window.location.reload();			} else {                will_handle_ajax_error('Manage Milestone',response.message);			}		},            'json');    }    let that_context = this;    let call_me_ishmael = callback.bind(that_context);    if (fight === 'approved_rejection' && !adminAjax.flags.b_ignore_milestone_cancel_dialog) {        bootbox.confirm({            message: "Are you sure you you want to cancel this Job? The cancellation will be final and the deposit will be refunded to the client.",            buttons: {                confirm: {                    label: 'Yes',                    className: 'btn-success'                },                cancel: {                    label: "No",                    className: 'btn-danger'                }            },            callback: function (result) {                if (result === true) {                    call_me_ishmael();                    return true;                }                return true;            }        });        return false;    } else {        adminAjax.flags.b_ignore_milestone_cancel_dialog = false; //reset global flag        call_me_ishmael();    }}//code-bookmark-js when the customer approves the milestone// noinspection JSUnusedGlobalSymbolsfunction hz_approve_milestone( id, message_confirm ){	//ajax-entry-protected hz_approve_milestone	var data = { action: 'hz_approve_milestone', id: id };    data = freelinguist_add_security_keys(data,'hz_approve_milestone');    if (data === false) {return;}	jQuery.post( adminAjax.url, data, function(response_raw){		/**         * @type {FreelinguistBasicAjaxResponse} response         */        let response = freelinguist_safe_cast_to_object(response_raw);		if (response.status) {            //code-notes added check for success before reloading            location.reload(true);        } else {            will_handle_ajax_error('Approving Milestone',response.message)		}	}, 'json');}	jQuery(function($){        //code-bookmark-js the amount of the milestone in the create milestone dialog, this keeps it numeric		$('#ms_amount').keypress(function(event) {			if ((event.which !== 46 || jQuery(this).val().indexOf('.') !== -1) && (event.which < 48 || event.which > 57)) {				event.preventDefault();			}		});	});