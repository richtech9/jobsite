<?phpif(!defined('WPINC')){die;}/*Translator Dashboard File*/    /*   * current-php-code 2020-Oct-6   * input-sanitized : job_type,type   * current-wp-template:  freelancer dashboard   */$type = FLInput::get('type');$job_type = FLInput::get('job_type');global $wpdb;$auto_job_rejected_for_linguist_hours_minutes = floatval(get_option('auto_job_rejected_for_linguist_hours'))*60; $current_user_id = (int)get_current_user_id();$paged 		= ( get_query_var('paged') ) ? get_query_var('paged') : 1;$paged = (int)$paged;if ($paged < 1) { $paged = 1;}/*$args = array( 	'post_type' 		=> 'job', 				'posts_per_page' 	=> 10, 				'paged' 			=> $paged,			 	 );*/    /**     * Get all jobs that I either bid on or made a proposal on     * If there is a filter for projects or contests then only pick that type of job     */    //$post_id_per_page  = (int) get_option('fl_page_limit_job_search',20);    $post_id_per_page = 20;    $post_id_offset = ($paged -1) * $post_id_per_page;    switch($job_type) {        case 'contest': {            //if searching for contest, then select only jobs I have made a proposal on            $post_id_user_flag_where = 'AND lookup_flag = '.FLPostLookupDataHelpers::POST_USER_DATA_FLAG_PARTICIPANT ;            break;        }        case 'project': {            //If searching for project, then select only jobs I have bid on            $post_id_user_flag_where = 'AND lookup_flag = '.FLPostLookupDataHelpers::POST_USER_DATA_FLAG_BID ;            break;        }        default: {            //if don't know, then do not filter            $post_id_user_flag_where = '';            if (!empty($job_type)) {                will_send_to_error_log("Unexpected verb in job_type for dashboard PeerOK (defaulting to no filters); ",                    $job_type,false,true);            }            break;        }    }    $sql_count_post_ids = /** @lang text */        "	 SELECT count(post_id) as da_count            FROM wp_fl_post_user_lookup            WHERE author_id = $current_user_id            $post_id_user_flag_where            ;            ";    $da_total_job_count = $wpdb->get_var($sql_count_post_ids);    $total_pages = (int)ceil($da_total_job_count/$post_id_per_page);    $query_part = $_SERVER['QUERY_STRING'];    $url_template = get_site_url() . '/dashboard/page/%page%/?'.$query_part;    $sql_post_ids = /** @lang text */        "	 SELECT post_id            FROM wp_fl_post_user_lookup            WHERE author_id = $current_user_id            $post_id_user_flag_where            ORDER BY post_id desc            LIMIT $post_id_per_page OFFSET $post_id_offset;                ";    $res_post_ids = $wpdb->get_results($sql_post_ids);//   will_send_to_error_log("SQL for customer dashboard ids is ",$wpdb->last_query);    if ($wpdb->last_error) {        $res_post_ids = [];        will_log_on_wpdb_error($wpdb);    }    if ($res_post_ids === false) {        $res_post_ids = [];        will_send_to_error_log("Unknown error getting post ids for the customer dashboard search ");    }    $array_post_ids = [];    //will_send_to_error_log('results of post ids in freelancer dashboard',$res_post_ids);    foreach ($res_post_ids as $res_id) {        $array_post_ids[] = $res_id->post_id;    }    if (empty($array_post_ids)) {        $array_post_ids[] = -1; //insert dummy id so the wp_query function does not dump all    }    $args = [        'post_type' 		=> 'job',        'post__in'      => $array_post_ids,        'posts_per_page' => -1,        'order' => 'DESC',        'orderby'=> 'ID'    ];    //will_send_to_error_log('args in freelancer dashboard',$args);    $wp_query = new WP_Query( $args ); //code-notes pushing post ids to the wp_query?><style>		@media (max-width: 767px){	#datatable thead {	    display: none;	}	.rr table tbody tr td.thrd-td h5 strong{		width: auto !important;	}		#datatable tbody td:first-child:before{		content: "Delivery Date";	}	#datatable tbody td:nth-child(2):before{		content: "Title";	}	#datatable tbody td:nth-child(3):before{		content: "Description";	}	#datatable tbody td:nth-child(4):before{		content: "Status";	}		 #datatable tbody td::before {	    background-color: #e5eef3;	    border-right: 1px solid #c8d5dc;	    bottom: 0px;	    color: #000000;	    content: "";	    /* replaced fontsize 12 */	    left: 0px;	    padding: 13px 7px;	    position: absolute;	    top: 0px;	    width: 130px;	}	#datatable tbody td:first-child {    border-top: 1px solid #c8d5dc;	}	#datatable tbody td {	    min-height: 50px;	}	#datatable tbody td {	    display: block;	    float: left;	    padding-left: 140px;	    position: relative;	    width: 100%;	    border-bottom: 1px solid #c8d5dc;	}}</style><section class="middle-content rr">	<div class="container">		<div class="own-job-dashboard">						<form id="filter_project_status" action="" method="post" >				<table style="float: right;">					<tr>												<td class=" enhanced-text">														<select name="job_type" class="regular-text" title="Select Type">								<option value="">Select Type</option>								<option value="contest" <?php if($job_type =='contest'):echo 'selected';endif;?>>Competition</option>								<option value="project" <?php if($job_type=='project'):echo 'selected';endif;?>>Project</option>															</select>						</td>						<td class=" regular-text">							<input type="submit" name="submit" class="signin-bttn login-btn-n" value="Filter">						</td>					</tr>				</table>					   </form>			<div class="job-table full-width">				<div class="tabblee">					   <table class="table-responsive" id="datatable">					      <thead>					         <tr>                                 <th class="first-th">Start Date</th>					            <th class="first-th">Delivery Date</th>					            <th class="snd-th">Title</th>					            <th class="trd-th">Description</th>					            <th class="forth-th" style="width: 20%">Status</th>					            <!--<th class="fifth-th"></th>-->					         </tr>					      </thead>					      <tbody>						<?php						$cur_jbid = $wpdb->prefix."fl_job";							while( $wp_query->have_posts() ) : $wp_query->the_post();														$job_id 	= get_the_ID();							$job_tbl 	= hz_is_linguist_asg( $job_id, get_current_user_id() );							$ms 	= hz_check_latest_milestone_status( $job_id, get_current_user_id() );														$ps 	= hz_check_latest_proposal_status( $job_id, get_current_user_id() );							$job_des 	= get_post_meta( $job_id,'project_description', true );							$ptype 		= get_post_meta( $job_id, 'fl_job_type', true );                            $tagType = FreelinguistTags::UNKNOWN_TAG_TYPE;                            if($ptype == 'contest'){                                $tagType = FreelinguistTags::CONTEST_TAG_TYPE;                            } else if($ptype == 'project'){                                $tagType = FreelinguistTags::PROJECT_TAG_TYPE; //PROJECT                            }							$job_title 	= get_post_meta($job_id,'project_title',true);														$tags = $wpdb->get_results(                                "SELECT GROUP_CONCAT(tag_id) as tag_ids FROM wp_tags_cache_job WHERE `job_id` = $job_id AND type = $tagType" );							$tags_name_array= array();							foreach($tags as $k=>$v){								$post_tags_array =explode(",",$v->tag_ids);								foreach($post_tags_array as $v1){								    if (empty($v1)) {continue;}									$interest_tags = $wpdb->get_results(                                        "SELECT * FROM wp_interest_tags WHERE `id` = $v1" );									foreach($interest_tags as $k2=>$v2){										$tags_name_array[] = $v2->tag_name;									}								}							}											$link = $ptype == 'contest' ? get_the_permalink().'&action=proposals' : get_site_url().'/job/'.get_the_title();							$rowcur_jbid = [];                            $da_start_ts = 0 ;							$link = '';																					if($ptype=='contest'){								$link = get_the_permalink().'&action=proposals';								if (!will_check_empty_object($ps)) {								    $da_start_ts = $ps->da_start_ts;                                } else {								    //get when clicked participate button if no proposals yet                                    $sql_statment = "SELECT id, UNIX_TIMESTAMP(created_at) as da_start_ts                                            FROM wp_fl_post_user_lookup                                             WHERE                                              post_id = $job_id AND                                              author_id = $current_user_id AND                                              lookup_flag = ". FLPostLookupDataHelpers::POST_USER_DATA_FLAG_PARTICIPANT;                                    $joined_res = $wpdb->get_results($sql_statment);                                    if (count($joined_res)) {                                        $da_start_ts = $joined_res[0]->da_start_ts ;                                    }                                }							} else{                                $sql_statment =                                    "SELECT *, UNIX_TIMESTAMP(post_date) as da_start_ts                                  FROM wp_fl_job                                   WHERE  `linguist_id` = '".$current_user_id."' AND `project_id` = '".$job_id."' AND job_status = 'start'                                   ORDER BY ID ASC                                  ";                                $rowcur_jbid = $wpdb->get_results( $sql_statment );								if(count($rowcur_jbid)>0){									$link = get_the_permalink()."&job_id=".$rowcur_jbid[0]->title;                                    $da_start_ts = $rowcur_jbid[0]->da_start_ts ;								}else{									$link = get_the_permalink();                                    $sql_statment =                                        "SELECT comment_ID, UNIX_TIMESTAMP(comment_date) as da_start_ts                                             FROM wp_comments                                             WHERE comment_post_ID = $job_id AND                                                   user_id = $current_user_id;                                          ";                                    $joined_res = $wpdb->get_results($sql_statment);                                    if (count($joined_res)) {                                        $da_start_ts = $joined_res[0]->da_start_ts ;                                    }								}							}							?>					         <tr data-job-id="job-<?php echo $job_id; ?>">                                 <td class="scnd-td enhanced-text">                                    <!--     code-notes : keep invisible span for sorting -->                                     <span class="" style="display: none"><?= $da_start_ts ?></span>                                     <span class="freelinguist-date-block a-timestamp-short-date"                                            data-ts="<?= $da_start_ts ?>"></span>                                     <em>                                         <?php                                         if($ptype=='contest'){                                             echo 'Competition';                                         }else{                                             echo ucfirst($ptype);                                         }                                         ?>                                     </em>                                 </td>					            <td class="scnd-td enhanced-text">									<?php echo get_post_meta( $job_id, 'job_standard_delivery_date', true ); ?><br>								</td>								<td  class="scnd-td enhanced-text">                                    <p>                                        <a style="color: #666;" href="<?php echo $link; ?>">                                            <span class="break-long-words">                                                <?php echo stripslashes(mb_strimwidth($job_title, 0, 100, ' ...')); ?>                                            </span>                                        </a>                                    </p>                                    <div class="job-table-detail-col">                                        <?php echo '$'. str_replace("_","-",get_post_meta($job_id,'estimated_budgets',true)); ?>                                    </div>					            </td>					            <td  class="thrd-td enhanced-text">					               <a style="color: #666;" href="<?php echo $link; ?>">                                       <p>                                           <span class="break-long-words">                                                <?= stripslashes(mb_strimwidth($job_des, 0, 150, ' ...')); ?>                                           </span>                                       </p>					               	</a>					            </td>					            <?php                                $currentStatus = '(unknown)';					            if($ptype == 'contest'){																		$allparticipants = get_post_meta($job_id,'all_contest_paricipants',true);									$lingPresent = explode(',', $allparticipants);																		if(in_array(get_current_user_id(),$lingPresent)){										$currentStatus = 'Working';										$prizesProposalAwarded = get_post_meta($job_id,'contest_awardedProposalPrizes',true);										$proposalPresent = explode(',', $prizesProposalAwarded);										if(!will_check_empty_object($ps) && in_array($ps->id,$proposalPresent)){											$currentStatus = 'Delivery';										}																				if(!will_check_empty_object($ps)){											if($ps->rejection_requested=='1' && $ps->status!='cancelled' && $ps->status!='completed' && $ps->status!='rejected' && $ps->status!='hire_mediator'){												$currentStatus = 'Proposal '.$ps->number.': Dispute(<span class="demo_time_proposal_reject" id="proposal_'.$ps->id.                                                    '" data-proposal_id="'.$ps->id.                                                    '" data-rejected_at="'.$ps->rejected_at_ts. //not used                                                    '" data-updated_at="'.$ps->updated_at_ts.  //not used                                                    '" data-new_date="'.                                                    (intval($ps->rejected_at_ts) + (60 * $auto_job_rejected_for_linguist_hours_minutes))*1000 .                                                    '"></span>)';											}											if($ps->status=='completed'){												$currentStatus = 'Proposal '.$ps->number.': Completed';																							}																						if($ps->status=='hire_mediator'){												$currentStatus = 'Proposal '.$ps->number.': Mediation';																							}											if($ps->status=='rejected'){												$currentStatus = 'Proposal '.$ps->id.': Rejected';																							}											if($ps->status=='request_revision' || ($ms && $ms->status=='approve') || ($ms && $ms->status=='request_completion') ){												$currentStatus = 'Working';											}																					}									}else{										$currentStatus = 'Pending';									}                                    //code-notes Show cancelled on freelancer dashboard page for status                                    $b_is_contest_cancelled = get_post_meta($job_id,'is_cancellation_approved') ? true : false;									if ($b_is_contest_cancelled) {                                        $currentStatus = 'Cancelled';                                    }								}else{																		$bid_exist      = $wpdb->get_var(                                        "SELECT count(*) FROM wp_comments WHERE comment_post_ID = $job_id AND user_id=$current_user_id" );									if($bid_exist){										$currentStatus = 'Bid';									}									if(isset($job_tbl) && is_object($job_tbl) && $job_tbl->job_status=='pending'){										$currentStatus = 'Hired';									}                                    if(isset($job_tbl) && is_object($job_tbl) && $job_tbl->job_status=='reject_job'){                                        $currentStatus = 'Declined';                                    }									if(isset($job_tbl) && is_object($job_tbl) && $job_tbl->job_status=='start'){										$currentStatus = 'Delivering';									}																		if($ms){										if($ms->status=='completed'){											$currentStatus = 'Milestone '.$ms->number.' Completed';																					}										if($ms->status=='reject'){											$currentStatus = 'Milestone '.$ms->number.' Dispute(<span class="demo_time_milestone_reject" id="milestone_'.$ms->ID.                                                '" data-milestone_id="'.$ms->ID.                                                '" data-rejected_at="'.$ms->rejected_at. //not used                                                '" data-updated_at="'.$ms->updated_at.  //not used                                                '" data-new_date="'.                                                (intval($ms->rejected_at_ts) + (60 * $auto_job_rejected_for_linguist_hours_minutes))*1000 .                                                '"></span>)';										}										if($ms->status=='hire_mediator'){											$currentStatus = 'Milestone '.$ms->number.' Mediation';																					}										if($ms->status=='approved_rejection'){											$currentStatus = 'Milestone '.$ms->number.' Rejected';																					}										if($ms->status=='request_revision' || $ms->status=='approve' || $ms->status=='request_completion'){											$currentStatus = 'Working';										}																			}								}					            ?>					            <td class="frth-td enhanced-text">					            	<a class="fl-job-dashboard-sinlge-status" style="" href="<?php echo $link; ?>">                                        <?php echo $currentStatus; ?>                                        <?php                                        $red_dot_type = FLRedDot::TYPE_PROJECTS;                                        if ($ptype === 'contest') {                                            $red_dot_type = FLRedDot::TYPE_CONTESTS;                                        }                                        ?>                                        <?= FLRedDot::generate_dot_html_for_user(                                            [$red_dot_type],$job_id                                        )                                        ?>					            	</a>					            </td>					            					         </tr>			                <?php endwhile; ?>							<?php wp_reset_postdata(); ?>    						      </tbody>					   </table>                    <?php                        freelinguist_print_pagination_bar($paged,$total_pages,$url_template,'bottom');                    ?>					</div>				</div>		</div>	</div></section><!--code-notes here is the new datatables view--><script>    jQuery(function($) {        $(".a-timestamp-short-date").each(function () {            var qthis = $(this);            var ts = $(this).data('ts');            if (ts === 0 || ts === '0' || ts === undefined || ts === '') {                qthis.text('');            } else {                var ts_number = parseInt(ts.toString());                // let ms = ts_number * 1000;                var m = moment(ts_number * 1000);                qthis.text(m.format('YYYY-MMM-D'));            }        });        console.log('script block');        if ($(window).width() > 767) {            jQuery('#datatable').DataTable( {                "paginate": false,                "searching": false,                "bInfo": false,                "order": [[ 0, "desc" ]],                //"ordering": false,                "fnInitComplete": function(){                    jQuery('.own-job-dashboard select').css({"float":"left"});                    jQuery('#datatable_length').css({"width":"100%"});                    jQuery('#datatable_length label').css({"padding":"10px 10px","width":"40%","float":"left"});                } ,                "drawCallback": function( settings ) {                }            } );        }    } );</script><script>jQuery(function(){		jQuery('.demo_time_milestone_reject').each(function(){			   		var milestone_id = jQuery(this).data('milestone_id');						var countDownDate = new Date(parseInt(jQuery(this).data('new_date'))).getTime();				// Update the count down every 1 second		var x = setInterval(function() {		    // Get todays date and time		    var now = new Date().getTime();            // Find the distance between now and the count down date            var distance = countDownDate - now;            // Time calculations for days, hours, minutes and seconds            var days = Math.floor(distance / (1000 * 60 * 60 * 24));            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));            // Display the result in the element with id="demo"            document.getElementById("milestone_"+milestone_id+"").innerHTML = days + "d " + hours + "h "                + "left";            // If the count down is finished, write some text            if (distance < 0) {                clearInterval(x);                document.getElementById("milestone_"+milestone_id+"").innerHTML = "EXPIRED";            }		  		}, 5000);											});		jQuery('.demo_time_proposal_reject').each(function(){						   		var proposal_id = jQuery(this).data('proposal_id');		console.log(proposal_id);						var countDownDate = new Date(parseInt(jQuery(this).data('new_date'))).getTime();				console.log(jQuery(this).data('new_date'));		// Update the count down every 1 second		var x = setInterval(function() {		    // Get todays date and time		    var now = new Date().getTime();            // Find the distance between now and the count down date            var distance = countDownDate - now;            // Time calculations for days, hours, minutes and seconds            var days = Math.floor(distance / (1000 * 60 * 60 * 24));            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));            var seconds = Math.floor((distance % (1000 * 60)) / 1000);            // Display the result in the element with id="demo"            document.getElementById("proposal_"+proposal_id+"").innerHTML = days + "d " + hours + "h "            + minutes + "m " + seconds + "s  left";            // If the count down is finished, write some text            if (distance < 0) {                clearInterval(x);                document.getElementById("proposal_"+proposal_id+"").innerHTML = "EXPIRED";             }		 		}, 5000);				});});</script>